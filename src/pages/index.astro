---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Home">
    <div class="queue" style="justify-content: space-between">
        <h3 style="display: block;">Song Queue</h3>
        <h3 class="queue-buttons">
            <button id="clear-queue">clear queue</button>
            <button id="import-playlist">Import queue/playlist</button>
            <button id="export-playlist">Export queue</button>
            <button id="droptoggle">↓</button>
        </h3>
        <div id="dropdown" style="display: none; width: 100%; clear: both;">
            <ul id="song-queue"></ul>
        </div>
    </div>
    <div class="main-container">
        <div class="song-list" id="song-list"></div>

        <div class="annoying-spacer"></div>

        <div class="controls">
            <h2>Now Playing</h2>
            <p id="current-song">No song playing</p>
            <div id="progress-container">
                <div id="progress-bar"></div>
                <div id="progress-thumb"></div>
            </div>
            <div id="time-display">
                <span id="current-time">0:00</span> / <span id="total-duration">0:00</span>
            </div>
            <div class="control-buttons">
                <button id="play-pause-button">⏵</button>
                <button id="stop-button">⏹</button>
                <button id="skip-button">⏭</button>
            </div>
        </div>

        <audio id="audio-player" style="display: none;"></audio>
    </div>
    <div id="toast-container"><h1>test</h1></div>
</Layout>

<script>
    const audioPlayer = document.getElementById("audio-player");
    const currentSong = document.getElementById("current-song");
    const playPauseButton = document.getElementById("play-pause-button");
    const progressContainer = document.getElementById("progress-container");
    const progressBar = document.getElementById("progress-bar");
    const progressThumb = document.getElementById("progress-thumb");
    const currentTimeDisplay = document.getElementById("current-time");
    const totalDurationDisplay = document.getElementById("total-duration");
    const songQueueElement = document.getElementById("song-queue");
    const toast = document.getElementById('toast-container');

    let songQueue: string[] = [];
    let isDragging = false;

    function formatTime(seconds) {
        const minutes = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60).toString().padStart(2, "0");
        return `${minutes}:${secs}`;
    }

    function playSong(songUrl) {
        audioPlayer.src = songUrl;
        audioPlayer.play();
        currentSong.textContent = `Playing: ${songUrl.split("/").pop()}`;
        playPauseButton.innerHTML = "&#9208;";
        document.title = `${songUrl.split("/").pop()} | EyeScary Music`;
    }

    function togglePlayPause() {
        if (audioPlayer.paused) {
            audioPlayer.play();
            playPauseButton.innerHTML = "&#9208;";
        } else {
            audioPlayer.pause();
            playPauseButton.innerHTML = "⏵";
        }
    }

    function stopSong() {
        audioPlayer.pause();
        audioPlayer.currentTime = 0;
        currentSong.textContent = "No song playing";
        playPauseButton.innerHTML = "⏵";
        updateProgress();
    }

    function updateProgress() {
        if (!isDragging) {
            const currentTime = audioPlayer.currentTime;
            const duration = audioPlayer.duration || 0;
            const progressPercent = (currentTime / duration) * 100 || 0;

            progressBar.style.width = `${progressPercent}%`;
            progressThumb.style.left = `${progressPercent}%`;
            currentTimeDisplay.textContent = formatTime(currentTime);
            totalDurationDisplay.textContent = formatTime(duration);
        }
    }

    function seek(event) {
        const rect = progressContainer.getBoundingClientRect();
        const clickX = event.clientX - rect.left;
        const progressWidth = rect.width;
        const clickRatio = clickX / progressWidth;

        if (audioPlayer.duration) {
            audioPlayer.currentTime = clickRatio * audioPlayer.duration;
        }
    }

    function startDrag(event) {
        isDragging = true;
        moveThumb(event);
    }

    function moveThumb(event) {
        if (!isDragging) return;

        const rect = progressContainer.getBoundingClientRect();
        let clickX = event.clientX - rect.left;
        const progressWidth = rect.width;

        clickX = Math.max(0, Math.min(clickX, progressWidth));
        const clickRatio = clickX / progressWidth;
        const progressPercent = clickRatio * 100;

        progressBar.style.width = `${progressPercent}%`;
        progressThumb.style.left = `${progressPercent}%`;

        if (audioPlayer.duration) {
            audioPlayer.currentTime = clickRatio * audioPlayer.duration;
        }
    }

    function endDrag() {
        isDragging = false;
    }

    function addToQueue(songUrl) {
        if (songUrl) {
            songQueue.push(songUrl);
            updateQueueDisplay();
            if (audioPlayer.paused && !audioPlayer.src) {
                playNextInQueue();
            } else {
                showToast();
                toast.innerHTML = "Added to queue";
                setTimeout(hideToast, 3000);
            }
        }
    }

    function downloadURI(uri, name) {
        const link = document.createElement("a");
        link.download = name;
        link.href = uri;
        link.click();
        link.remove();
    }

    function exportPlist() {
        const blob = new Blob([songQueue], { type: "text/plain" });
        const url = URL.createObjectURL(blob);
        downloadURI(url, prompt("Playlist name:") + ".espl");
    }

    function importPlist() {
        const input = document.createElement("input");
        input.type = "file";
        input.accept = ".espl";

        input.onchange = (e) => {
            const file = e.target.files[0];
            if (!file) return;

            const reader = new FileReader();
            reader.readAsText(file, "UTF-8");

            reader.onload = (readerEvent) => {
                const content = readerEvent.target.result.trim();
                const plist = content.split(",");
                plist.forEach((item) => addToQueue(item));
            };
        };

        input.click();
    }

    function updateQueueDisplay() {
        songQueueElement.innerHTML = "";
        songQueue.forEach((song, index) => {
            const li = document.createElement("li");
            li.textContent = song.split("/").pop();
            if (li.textContent.length > 20) {
                li.textContent = li.textContent.substring(0, 18) + "...";
            }
            if (index === 0) li.style.fontWeight = "bold";
            songQueueElement.appendChild(li);
        });
    }

    function playNextInQueue() {
        if (songQueue.length > 0) {
            const nextSong = songQueue.shift();
            playSong(nextSong);
            updateQueueDisplay();
        } else {
            stopSong();
        }
    }

    function clearQueue() {
        songQueue = [];
        updateQueueDisplay();
        showToast();
        toast.innerHTML = "Queue cleared";
        setTimeout(hideToast, 3000);
    }

    function skipSong() {
        if (songQueue.length > 0) {
            const nextSong = songQueue.shift();
            playSong(nextSong);
            updateQueueDisplay();
        } else {
            stopSong();
        }
    }

    function dropdown() {
        const dropdown = document.getElementById("dropdown");
        const toggleBtn = document.getElementById("droptoggle");
        if (dropdown.style.display === "none") {
            dropdown.style.display = "flex";
            toggleBtn.innerHTML = "↑";
        } else {
            dropdown.style.display = "none";
            toggleBtn.innerHTML = "↓";
        }
    }

    function showToast() {
        clearTimeout(toast.timeout);
        toast.classList.add('show');
    }

    function hideToast() {
        toast.classList.remove('show');
    }

    // Event Listeners
    audioPlayer.addEventListener("timeupdate", updateProgress);
    audioPlayer.addEventListener("loadedmetadata", () => {
        totalDurationDisplay.textContent = formatTime(audioPlayer.duration);
    });
    audioPlayer.addEventListener("ended", playNextInQueue);

    progressContainer.addEventListener("click", seek);
    progressThumb.addEventListener("mousedown", startDrag);
    document.addEventListener("mousemove", moveThumb);
    document.addEventListener("mouseup", endDrag);

    document.addEventListener("DOMContentLoaded", function () {
        document.getElementById("clear-queue").addEventListener("click", clearQueue);
        document.getElementById("import-playlist").addEventListener("click", importPlist);
        document.getElementById("export-playlist").addEventListener("click", exportPlist);
        document.getElementById("droptoggle").addEventListener("click", dropdown);
        document.getElementById("play-pause-button").addEventListener("click", togglePlayPause);
        document.getElementById("stop-button").addEventListener("click", stopSong);
        document.getElementById("skip-button").addEventListener("click", skipSong);

        showToast();
        toast.innerHTML = "Loading songs...";
        fetch("https://eyescary-development.github.io/CDN/musik/songlist.json")
            .then((response) => response.json())
            .then((songs) => {
                const songsArray = Object.values(songs);
                for (const song of songsArray) {
                    document.getElementById("song-list").innerHTML +=
                        `<div class='song-card'>
                            <img src='${song.albumArt}' alt='Album Art'>
                            <p class='song-title'>${song.songTitle}</p>
                            <p class='album-title'>${song.albumTitle}</p>
                            <button class='play-button' data-url='${song.songUrl}'>Play</button>
                        </div>`;
                }
                toast.innerHTML = "Song list loaded";
                setTimeout(hideToast, 3000);
            })
            .catch((error) => console.error("Error fetching the song list:", error));
    });

    document.getElementById("song-list").addEventListener("click", (e) => {
        if (e.target && e.target.classList.contains("play-button")) {
            const url = e.target.dataset.url;
            addToQueue(url);
        }
    });
</script>
